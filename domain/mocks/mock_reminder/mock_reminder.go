// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/reminder/reminder.go
//
// Generated by this command:
//
//	mockgen -source=./domain/reminder/reminder.go -destination=./domain/mocks/mock_reminder/mock_reminder.go
//

// Package mock_reminder is a generated GoMock package.
package mock_reminder

import (
	reflect "reflect"

	models "github.com/rohanchauhan02/automation-engine/models"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockUsecase) CreateTask(userID string, payload models.TaskRequest) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", userID, payload)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockUsecaseMockRecorder) CreateTask(userID, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockUsecase)(nil).CreateTask), userID, payload)
}

// Reminder mocks base method.
func (m *MockUsecase) Reminder() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reminder")
}

// Reminder indicates an expected call of Reminder.
func (mr *MockUsecaseMockRecorder) Reminder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reminder", reflect.TypeOf((*MockUsecase)(nil).Reminder))
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetTaskByDueDate mocks base method.
func (m *MockRepository) GetTaskByDueDate(interval int64) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByDueDate", interval)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByDueDate indicates an expected call of GetTaskByDueDate.
func (mr *MockRepositoryMockRecorder) GetTaskByDueDate(interval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByDueDate", reflect.TypeOf((*MockRepository)(nil).GetTaskByDueDate), interval)
}

// GetUserByID mocks base method.
func (m *MockRepository) GetUserByID(id int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryMockRecorder) GetUserByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepository)(nil).GetUserByID), id)
}

// InsertTask mocks base method.
func (m *MockRepository) InsertTask(dto *models.Task) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTask", dto)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTask indicates an expected call of InsertTask.
func (mr *MockRepositoryMockRecorder) InsertTask(dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTask", reflect.TypeOf((*MockRepository)(nil).InsertTask), dto)
}
